import os
import io
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Command, InlineKeyboardMarkup, InlineKeyboardButton
from aiohttp import ClientSession, FormData
from dotenv import load_dotenv

load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MODEL_URL      = os.getenv("MODEL_URL")  # http://model:8000

bot = Bot(token=TELEGRAM_TOKEN)
dp  = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# waiting_for_photo ‚Üí waiting_for_style ‚Üí waiting_for_prompt ‚Üí finished
user_states = {}
user_images = {}
user_styles = {}

# –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
STYLES = ["Van Gogh", "Picasso", "Synthwave", "Steampunk", "Cyberpunk"]

def style_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text=s, callback_data=f"choose_style:{s}")
        for s in STYLES
    ]
    kb.add(*buttons)
    return kb

def postgen_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
      InlineKeyboardButton("‚Ü∫ –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å", callback_data="redo"),
      InlineKeyboardButton("üì∏ –ù–æ–≤–æ–µ —Ñ–æ—Ç–æ", callback_data="new_photo")
    )
    return kb

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    uid = message.from_user.id
    # –°–±—Ä–æ—Å–∏–º –≤—Å—ë
    user_states[uid] = "waiting_for_photo"
    user_images.pop(uid, None)
    user_styles.pop(uid, None)

    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ—ë —Å–µ–ª—Ñ–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å—Ç–∏–ª–∏–∑–∞—Ü–∏—é.",
        reply_markup=None
    )

@dp.message(content_types=types.ContentType.PHOTO)
async def photo_handler(message: types.Message):
    uid = message.from_user.id
    if user_states.get(uid) not in ("waiting_for_photo", "finished"):
        return await message.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

    file = await bot.get_file(message.photo[-1].file_id)
    data = await bot.download_file(file.file_path)
    user_images[uid] = data.getvalue()
    user_states[uid] = "waiting_for_style"

    await message.answer(
        "–°–µ–ª—Ñ–∏ –ø–æ–ª—É—á–µ–Ω–æ! –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç:",
        reply_markup=style_keyboard()
    )

@dp.callback_query(F.data.startswith("choose_style:"))
async def style_chosen(call: types.CallbackQuery):
    uid = call.from_user.id
    if user_states.get(uid) != "waiting_for_style":
        return await call.answer()
    style = call.data.split(":",1)[1]
    user_styles[uid] = style
    user_states[uid] = "waiting_for_prompt"

    await call.message.answer(
        f"–°—Ç–∏–ª—å ¬´{style}¬ª –≤—ã–±—Ä–∞–Ω. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç, –∫–∞–∫ –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å —Å–µ–ª—Ñ–∏.",
    )
    await call.answer()

@dp.message(lambda m: m.text and user_states.get(m.from_user.id) == "waiting_for_style")
async def custom_style(message: types.Message):
    uid = message.from_user.id
    # —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏
    user_styles[uid] = message.text
    user_states[uid] = "waiting_for_prompt"
    await message.answer(f"–°—Ç–∏–ª—å ¬´{message.text}¬ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.")

@dp.message(lambda m: m.text and user_states.get(m.from_user.id) == "waiting_for_prompt")
async def prompt_handler(message: types.Message):
    uid    = message.from_user.id
    prompt = message.text
    img    = user_images.get(uid)
    style  = user_styles.get(uid)
    if not img or not style:
        return await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –æ—Ç–ø—Ä–∞–≤—å /start –∏ –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")

    full_prompt = f"{style}, {prompt}".strip(", ")
    await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é‚Ä¶")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ inference-—Å–µ—Ä–≤–∏—Å
    async with ClientSession() as sess:
        form = FormData()
        form.add_field("prompt", full_prompt)
        form.add_field("file", img, filename="selfie.png", content_type="image/png")
        resp = await sess.post(f"{MODEL_URL}/generate/", data=form)
        if resp.status != 200:
            return await message.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        out = await resp.read()

    await message.answer_photo(
        out,
        caption="üé® –í–æ—Ç —Ç–≤–æ—ë —Å–µ–ª—Ñ–∏ –≤ –Ω–æ–≤–æ–º —Å—Ç–∏–ª–µ!",
        reply_markup=postgen_keyboard()
    )
    user_states[uid] = "finished"

@dp.callback_query(F.data == "redo")
async def redo_handler(call: types.CallbackQuery):
    uid = call.from_user.id
    if user_states.get(uid) != "finished":
        return await call.answer()
    user_states[uid] = "waiting_for_style"
    await call.message.reply("–û–∫–µ–π, –≤—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π —Å—Ç–∏–ª—å:", reply_markup=style_keyboard())
    await call.answer()

@dp.callback_query(F.data == "new_photo")
async def newphoto_handler(call: types.CallbackQuery):
    uid = call.from_user.id
    user_states[uid] = "waiting_for_photo"
    user_images.pop(uid, None)
    user_styles.pop(uid, None)
    await call.message.reply("–•–æ—Ä–æ—à–æ, –ø—Ä–∏—à–ª–∏ –Ω–æ–≤–æ–µ —Å–µ–ª—Ñ–∏.")
    await call.answer()

@dp.message()
async def fallback(message: types.Message):
    uid   = message.from_user.id
    state = user_states.get(uid)
    if state == "waiting_for_photo":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—ë —Å–µ–ª—Ñ–∏, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")
    elif state == "waiting_for_style":
        await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ –ø—Ä–∏—à–ª–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç.")
    elif state == "waiting_for_prompt":
        await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ.")
    else:
        await message.answer("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

if __name__ == "__main__":
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)
